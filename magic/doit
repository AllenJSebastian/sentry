#!/usr/bin/env bash

# TODO:
# - bold and newline pad the postcondition notifications
# - set up virtualenv automatic sourcing (via direnv?)

# TODO: LDFLAGS for macos packages. I think we only need libxmlsec1 these days btw.
# We should also pkg-config instead of hardcoding.
PIP="python -m pip --disable-pip-version-check"
PIP_VERSION=19.2.3

# operate in the git root - we're assuming this for all relative paths
cd "$(git rev-parse --show-toplevel)"

die () {
    >&2 echo "$1"; exit 1
}

# TODO: More steps for system packages. We don't need a lot, so modularizing seems fine. Assume brew for now.

step_python () {
    # XXX: ideally, we should be using pyenv, but this will do for now
    case "$OSTYPE" in
    darwin*)
        brew install python@2
        ;;
    *)
        false
        ;;
    esac
    return $?
}

step_python_postcondition () {
    echo "Making sure python2.7 is available..."
    python2.7 -c "import sys; sys.exit(sys.version_info[:2] != (2, 7))"
    return $?
}

# TODO: should we separately assert that sentry is installed, or do it here?
# TODO: currently, we aren't using pip-faster, but I'd like to eventually, preferably self-contained since it installs venv-update from pypi just for pip-faster, and current metadata pins pip to < 19 which results in an ugly/annoying warning.
step_venv () {
    ./magic/bin/venv-update \
        venv= -ppython2.7 ./.venv \
        bootstrap-deps= "pip==${PIP_VERSION}" \
        install= -r requirements-base.txt -r requirements-dev.txt \
        pip-command= $PIP install
    return $?
}

step_venv_postcondition () {
    echo "Making sure the virtualenv is up to date with sentry's requirements..."
    # this is a noop, since venv-update is the best way to check AND ensure
    return 0
}

# TODO: git hooks, pre-commit

# TODO: sentry init, devservices, node/yarn stuff, webpack stuff...

# does bash propagate SIGINT all the way out of the for loop?

for step in \
    step_python \
    step_venv \
    ; do
    "${step}_postcondition" || "$step" || die "${step} failed."
    "${step}_postcondition" || die "${step}_postcondition failed."
done
